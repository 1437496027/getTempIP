<!-- scan : 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod : 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
			当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug : 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
	<!--用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。 
		通过<property>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 
		例如使用<property>定义上下文名称，然后在<contentName>设置logger上下文时使用 -->
	<property name="APP_Name" value="获取临时公网IP" />
	<!-- 两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。 -->
	<timestamp key="bySecond" datePattern="yyyy-MM-dd-HH:mm:ss" />
	
	<contextName>${APP_Name}</contextName>
	
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder 默认配置为PatternLayoutEncoder -->
		<encoder><pattern>[%d{${bySecond}}][%thread][%-5level]%logger{36} - %msg%n</pattern></encoder>
	</appender>
	
	<!-- rollingFile DEMO -->
	<!-- 每天生成一个日志文件，保存30天的日志文件 -->
	<appender name="ROLLINGFILE" class="ch.qos.logback.core.rolling.RollingFileAppender">   
	    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">   
	      <fileNamePattern>logs/logFile.%d{yyyy-MM-dd}.log</fileNamePattern>   
	      <maxHistory>30</maxHistory>
	    </rollingPolicy>   
	    <encoder><pattern>[%d{${bySecond}}][%thread][%-5level]%logger{36} - %msg%n</pattern></encoder>   
	</appender>
	
    <logger name="org.quartz" level="DEBUG"	additivity="false">
    	<appender-ref ref="STDOUT" />
    </logger>
	
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref = "ROLLINGFILE" />
	</root>
	
</configuration>